<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- servlet에서 보듯이 요청과 관련된 객체를 정의합니다.
	url과 관련된 controller나, @(어노테이션), ViewResolver, Interceptor, MultipartResolver 등의 설정을 해줍니다. -->


	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<context:component-scan base-package="main.controller"/>
	<context:component-scan base-package="adminmain.controller"/>
	<context:component-scan base-package="adminboard.controller"/>
	<context:component-scan base-package="adminmember.controller"/>
	
	<!-- ginkgo 1928, member_Email(Gmail) 발송 --> 	
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="ginkgo1928@gmail.com"/>
		<property name="password" value="newall1013!"/>
		<property name="javaMailProperties">
		<props>
			<prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
			<prop key="mail.smtp.starttls.enable">true</prop>
			<prop key="mail.smtp.auth">true</prop>
		</props>
		</property>
	</bean>
	
	<bean id="mailService" class="member.service.MemberMailService">
		<property name="javaMailSender"  ref="javaMailSender" />
	</bean>
	
	<context:component-scan base-package="member.controller"/>
	
	<!-- 용제 -->
	<context:component-scan base-package="meetingboard.controller"/>
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources location="/resources/" mapping="/resources/**" />
	<mvc:resources location="/image/" mapping="/image/**"/>
	<mvc:resources location="/images/" mapping="/images/**"/>
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/css/" mapping="/css/**"/>
	<mvc:resources location="/storage/" mapping="/storage/**"/>
	<mvc:resources location="/adminjs/" mapping="/adminjs/**"/>
	<mvc:resources location="/admincss/" mapping="/admincss/**"/>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="suffix" value=".jsp" />
	</bean>
	
	
	<!-- fileUpload -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="5000000"/>
	</bean>
	
	<!-- json -->
	<bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<property name="contentType" value="text/html;charset=UTF-8" />
	</bean>

	<bean id="beanNameResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0" />
	</bean>
	
	<context:component-scan base-package="co.kr.bitcampmentor" />
	
	
</beans>
